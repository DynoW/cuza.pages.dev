---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Încarcă PDF by @Danutz" nofollow noindex bodyClass="mx-4">
    <div class="max-w-sm md:max-w-lg mx-auto bg-white p-6 rounded-lg shadow-lg absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/3">
        <h1 class="text-center text-gray-800">
            Încarcă documentul PDF pentru <a href="https://cuza.pages.dev" class="text-blue-500">cuza.pages.dev</a> - <a href="https://github.com/DynoW" class="text-blue-500">DynoW</a>
        </h1>
        <form id="uploadForm" method="POST" enctype="multipart/form-data" class="flex flex-col gap-4 mt-4">
            <label for="page" class="font-bold">Pagina:</label>
            <select id="page" name="page" required class="p-2 border border-gray-300 rounded">
                <option value="bac">Bac</option>
                <option value="teste">Teste Antrenament</option>
                <option value="sim">Simulări Județene</option>
            </select>

            <label for="year" class="font-bold">An:</label>
            <input type="number" id="year" name="year" required class="p-2 border border-gray-300 rounded" />

            <div id="titleField" class="hidden">
                <label for="title" class="font-bold">Titlu:</label>
                <select id="title" name="title" class="p-2 border border-gray-300 rounded">
                    <option value="Simulare">Simulare</option>
                    <option value="Model">Model</option>
                    <option value="Sesiunea-I">Sesiunea I</option>
                    <option value="Sesiunea-II">Sesiunea II</option>
                    <option value="Sesiune-Olimpici">Sesiune olimpici</option>
                    <option value="Rezerva">Rezerva</option>
                </select>
            </div>

            <label for="type" class="font-bold">Tip:</label>
            <select id="type" name="type" required class="p-2 border border-gray-300 rounded">
                <option value="model">Model</option>
                <option value="simulare">Simulare</option>
                <option value="test">Test</option>
                <option value="01">01</option>
                <option value="02">02</option>
                <option value="03">03</option>
                <option value="04">04</option>
                <option value="05">05</option>
                <option value="06">06</option>
                <option value="07">07</option>
                <option value="08">08</option>
                <option value="09">09</option>
                <option value="10">10</option>
            </select>

            <div id="simulationField" class="hidden">
                <label for="simulation" class="font-bold">Tip simulare:</label>
                <select id="simulation" name="simulation" class="p-2 border border-gray-300 rounded">
                    <option value="judetene">Județeană</option>
                    <option value="locale">Locală</option>
                </select>
            </div>

            <div id="countyField" class="hidden">
                <label for="county" class="font-bold">Județ:</label>
                <select id="county" name="county" class="p-2 border border-gray-300 rounded">
                    <option value="Alba">Alba</option>
                    <option value="Arad">Arad</option>
                    <option value="Argeș">Argeș</option>
                    <option value="Bacău">Bacău</option>
                    <option value="Bihor">Bihor</option>
                    <option value="Bistrița-Năsăud">Bistrița-Năsăud</option>
                    <option value="Botoșani">Botoșani</option>
                    <option value="Brașov">Brașov</option>
                    <option value="Brăila">Brăila</option>
                    <option value="Buzău">Buzău</option>
                    <option value="Caraș-Severin">Caraș-Severin</option>
                    <option value="Călărași">Călărași</option>
                    <option value="Cluj">Cluj</option>
                    <option value="Constanța">Constanța</option>
                    <option value="Covasna">Covasna</option>
                    <option value="Dâmbovița">Dâmbovița</option>
                    <option value="Dolj">Dolj</option>
                    <option value="Galați">Galați</option>
                    <option value="Giurgiu">Giurgiu</option>
                    <option value="Gorj">Gorj</option>
                    <option value="Harghita">Harghita</option>
                    <option value="Hunedoara">Hunedoara</option>
                    <option value="Ialomița">Ialomița</option>
                    <option value="Iași">Iași</option>
                    <option value="Ilfov">Ilfov</option>
                    <option value="Maramureș">Maramureș</option>
                    <option value="Mehedinți">Mehedinți</option>
                    <option value="Mureș">Mureș</option>
                    <option value="Neamț">Neamț</option>
                    <option value="Olt">Olt</option>
                    <option value="Prahova">Prahova</option>
                    <option value="Satu Mare">Satu Mare</option>
                    <option value="Sălaj">Sălaj</option>
                    <option value="Sibiu">Sibiu</option>
                    <option value="Suceava">Suceava</option>
                    <option value="Teleorman">Teleorman</option>
                    <option value="Timiș">Timiș</option>
                    <option value="Tulcea">Tulcea</option>
                    <option value="Vaslui">Vaslui</option>
                    <option value="Vâlcea">Vâlcea</option>
                    <option value="Vrancea">Vrancea</option>
                    <option value="București">București</option>
                </select>
            </div>

            <div id="localField" class="hidden">
                <label for="local" class="font-bold">Localitate/Liceu (poate fi LAICUZA):</label>
                <input type="text" id="local" name="local" class="p-2 border border-gray-300 rounded" />
            </div>

            <div id="testNumberField" class="hidden">
                <label for="testNumber" class="font-bold">Număr Test:</label>
                <input type="number" id="testNumber" name="testNumber" min="1" max="99" class="p-2 border border-gray-300 rounded" oninput="this.value = this.value > 9 ? this.value : this.value.padStart(2, '0')" />
            </div>

            <label for="type2" class="font-bold">Variantă/Barem:</label>
            <select id="type2" name="type2" required class="p-2 border border-gray-300 rounded">
                <option value="var">Var</option>
                <option value="bar">Bar</option>
            </select>

            <label for="file" class="font-bold">Selectează PDF:</label>
            <input type="file" id="file" name="file" accept="application/pdf" required class="p-2 border border-gray-300 rounded" />

            <button type="submit" class="bg-blue-500 text-white p-2 rounded mt-4 cursor-pointer hover:bg-blue-600">Încarcă</button>
        </form>
        <div id="message" class="mt-4 text-center"></div>
    </div>

    <!-- The Modal -->
    <div id="passwordModal" class="modal fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
        <div class="modal-content bg-white p-6 rounded-lg shadow-lg w-80">
            <div class="modal-content-heading flex justify-between items-center">
                <label for="passwordInput" class="passwordInputText font-bold">Introdu parola</label>
                <span class="close cursor-pointer text-gray-500 text-2xl font-bold">&times;</span>
            </div>
            <input type="password" id="passwordInput" class="p-2 border border-gray-300 rounded mt-4" />
            <button id="submitPassword" class="bg-blue-500 text-white p-2 rounded mt-4 cursor-pointer hover:bg-blue-600">Trimite</button>
        </div>
    </div>

    <script>
        const pageSelect = document.getElementById("page");
        let page = pageSelect ? (pageSelect as HTMLSelectElement).value : '';
        const simulationSelect = document.getElementById("simulation");
        let simulation = simulationSelect ? (simulationSelect as HTMLSelectElement).value : '';
        const titluSelect = document.getElementById("title"); // titleSelect is already declared
        let title = titluSelect ? (titluSelect as HTMLSelectElement).value : '';
        const simulationField = document.getElementById("simulationField");
        const countyField = document.getElementById("countyField");
        const localField = document.getElementById("localField");
        const testNumberField = document.getElementById("testNumberField");
        const titleField = document.getElementById("titleField");
        const typeField = document.getElementById("type") as HTMLSelectElement;

        function toggleFields(page: string, simulation: string) {
            if (typeField) {
                const options = typeField.options;
                for (let i = 0; i < options.length; i++) {
                    const option = options[i];
                    if (page === 'teste' && option.value !== 'test') {
                        option.classList.add('hidden');
                    } else if (page === 'sim' && option.value !== 'simulare') {
                        option.classList.add('hidden');
                    } else {
                        option.classList.remove('hidden');
                    }
                }
            }
            if (page === 'bac') {
                titleField?.classList.remove('hidden');
                titleField?.querySelector('select')?.setAttribute('required', 'true');
                simulationField?.classList.add('hidden');
                simulationField?.querySelector('select')?.removeAttribute('required');
                testNumberField?.classList.add('hidden');
                testNumberField?.querySelector('input')?.removeAttribute('required');
                countyField?.classList.add('hidden');
                countyField?.querySelector('select')?.removeAttribute('required');
                localField?.classList.add('hidden');
                localField?.querySelector('input')?.removeAttribute('required');
            } else if (page === 'teste') {
                titleField?.classList.add('hidden');
                titleField?.querySelector('select')?.removeAttribute('required');
                if (typeField) typeField.value = 'test';
                simulationField?.classList.add('hidden');
                simulationField?.querySelector('select')?.removeAttribute('required');
                testNumberField?.classList.remove('hidden');
                testNumberField?.querySelector('input')?.setAttribute('required', 'true');
                countyField?.classList.add('hidden');
                countyField?.querySelector('select')?.removeAttribute('required');
                localField?.classList.add('hidden');
                localField?.querySelector('input')?.removeAttribute('required');
            } else if (page === 'sim') {
                titleField?.classList.add('hidden');
                titleField?.querySelector('select')?.removeAttribute('required');
                if (typeField) typeField.value = 'simulare';
                simulationField?.classList.remove('hidden');
                simulationField?.querySelector('select')?.setAttribute('required', 'true');
                testNumberField?.classList.add('hidden');
                testNumberField?.querySelector('input')?.removeAttribute('required');
                if (simulation === 'judetene') {
                    countyField?.classList.remove('hidden');
                    countyField?.querySelector('select')?.setAttribute('required', 'true');
                    localField?.classList.add('hidden');
                    localField?.querySelector('input')?.removeAttribute('required');
                } else {
                    countyField?.classList.add('hidden');
                    countyField?.querySelector('select')?.removeAttribute('required');
                    localField?.classList.remove('hidden');
                    localField?.querySelector('input')?.setAttribute('required', 'true');
                }
            } else {
                titleField?.classList.add('hidden');
                titleField?.querySelector('select')?.removeAttribute('required');
                simulationField?.classList.add('hidden');
                simulationField?.querySelector('select')?.removeAttribute('required');
                testNumberField?.classList.add('hidden');
                testNumberField?.querySelector('input')?.removeAttribute('required');
                countyField?.classList.add('hidden');
                countyField?.querySelector('select')?.removeAttribute('required');
                localField?.classList.add('hidden');
                localField?.querySelector('input')?.removeAttribute('required');
            }
        }

        function toggleTypeOptions(title: string) {
            if (typeField) {
                const options = typeField.options;
                let firstVisibleOption = null;
                for (let i = 0; i < options.length; i++) {
                    const option = options[i];
                    if (title === 'Simulare' && option.value !== 'simulare') {
                        option.classList.add('hidden');
                    } else if (title === 'Model' && option.value !== 'model') {
                        option.classList.add('hidden');
                    } else if (title !== 'Simulare' && title !== 'Model' && !['01', '02', '03', '04', '05', '06', '07', '08', '09', '10'].includes(option.value)) {
                        option.classList.add('hidden');
                    } else {
                        option.classList.remove('hidden');
                        if (!firstVisibleOption) {
                            firstVisibleOption = option.value;
                        }
                    }
                }
                if (firstVisibleOption) {
                    typeField.value = firstVisibleOption;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            toggleFields(page, simulation);
            toggleTypeOptions(title);
        });

        pageSelect?.addEventListener('change', (event) => {
            const target = event.target;
            page = (target as HTMLSelectElement).value;
            toggleFields(page, simulation);
        });

        simulationSelect?.addEventListener('change', (event) => {
            const target = event.target;
            simulation = (target as HTMLSelectElement).value;
            toggleFields(page, simulation);
        });

        const titleSelect = document.getElementById("title");
        titleSelect?.addEventListener('change', (event) => {
            const target = event.target;
            const title = (target as HTMLSelectElement).value;
            toggleTypeOptions(title);
        });

        const form = document.getElementById("uploadForm");
        const messageDiv = document.getElementById("message");
        const modal = document.getElementById("passwordModal");
        const closeModal = document.getElementsByClassName("close")[0];
        const submitPasswordBtn = document.getElementById("submitPassword");

        let password = "";

        if (form && messageDiv && modal && closeModal && submitPasswordBtn) {
            form.addEventListener("submit", async (event) => {
                event.preventDefault();
                modal.classList.remove("hidden");
            });

            (closeModal as HTMLElement).onclick = function () {
                modal.classList.add("hidden");
            };

            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.classList.add("hidden");
                }
            };

            submitPasswordBtn.onclick = async function () {
                const passwordInput = document.getElementById("passwordInput");
                if (passwordInput) {
                    password = (passwordInput as HTMLInputElement).value;
                }
                modal.classList.add("hidden");

                messageDiv.textContent = "Se încarcă...";
                messageDiv.className = "text-blue-500";

                const formData = new FormData(form as HTMLFormElement);

                // Remove unnecessary parameters based on the selected page
                if (page === 'bac') {
                    formData.delete('simulation');
                    formData.delete('county');
                    formData.delete('local');
                    formData.delete('testNumber');
                } else if (page === 'teste') {
                    formData.delete('title');
                    formData.delete('simulation');
                    formData.delete('county');
                    formData.delete('local');
                } else if (page === 'sim') {
                    formData.delete('title');
                    formData.delete('testNumber');
                    if (simulation === 'judetene') {
                        formData.delete('local');
                    } else {
                        formData.delete('county');
                    }
                }

                const username = "admin";
                const authHeader = "Basic " + btoa(`${username}:${password}`);

                try {
                    const response = await fetch(
                        "https://cuza-worker.danutz.workers.dev",
                        {
                            method: "POST",
                            headers: {
                                Authorization: authHeader,
                            },
                            body: formData,
                        },
                    );

                    if (response.ok) {
                        messageDiv.textContent = "Fișierul a fost încărcat cu succes!";
                        messageDiv.className = "text-green-500";
                    } else {
                        const result = await response.text();
                        messageDiv.textContent = `Eroare: ${result}`;
                        messageDiv.className = "text-red-500";
                    }
                } catch (error) {
                    messageDiv.textContent = "A apărut o eroare în timpul încărcării.";
                    messageDiv.className = "text-red-500";
                }
            };
        }
    </script>
</Layout>