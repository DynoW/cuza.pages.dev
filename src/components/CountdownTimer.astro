---
import { getCountdownConfig } from "../config/countdown";
import ProgressBar from "./countdown/ProgressBar.astro";

const config = getCountdownConfig();
---

<div
  id="countdown-container"
  class="bg-[rgba(10,13,16,.9)] rounded-3xl py-3 px-4 text-white mb-4"
>
  <div class="flex justify-between items-center mb-2">
    <h3 id="countdown-title" class="text-lg font-bold">{config.title}</h3>
    <button id="toggle-countdown" class="text-white hover:text-gray-300">
      <span id="toggle-icon" class="cursor-pointer">▼</span>
    </button>
  </div>

  <div id="countdown-content">
    <!-- Countdown timer until exam -->
    <div id="countdown-to-exam">
      <p class="text-sm mb-1">Timp rămas până la examen:</p>
      <div class="grid grid-cols-4 gap-2 text-center text-lg md:text-xl font-bold">
        <div class="bg-[rgba(30,33,36,.9)] rounded-lg p-2 flex-1 min-w-0">
          <span id="days">--</span>
          <span class="text-xs block text-center">Zile</span>
        </div>
        <div class="bg-[rgba(30,33,36,.9)] rounded-lg p-2 flex-1 min-w-0">
          <span id="hours">--</span>
          <span class="text-xs block text-center">Ore</span>
        </div>
        <div class="bg-[rgba(30,33,36,.9)] rounded-lg p-2 flex-1 min-w-0">
          <span id="minutes">--</span>
          <span class="text-xs block text-center">Minute</span>
        </div>
        <div class="bg-[rgba(30,33,36,.9)] rounded-lg p-2 flex-1 min-w-0">
          <span id="seconds">--</span>
          <span class="text-xs block text-center">Secunde</span>
        </div>
      </div>
    </div>

    <!-- Progress bar until results -->
    <div id="progress-to-results" class="hidden">
      <ProgressBar progress={0} />
    </div>

    <!-- Completion message -->
    <div id="completion-message" class="hidden">
      <div class="w-full bg-[rgba(30,33,36,.9)] rounded-full h-5 mb-2">
        <div class="bg-green-600 h-5 rounded-full text-xs text-center leading-5 text-white w-full">
          Completed
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { calculateTimeDifference, calculateProgress } from "../utils/time";
  import {
    getElementById,
    setElementContent,
    showElement,
    hideElement,
    padNumber,
  } from "../utils/dom";
  import { getStorageItem, setStorageItem } from "../utils/storage";

  class CountdownManager {
    private startDate: number;
    private endDate: number;
    private elements: Record<string, HTMLElement | null>;
    private updateInterval: ReturnType<typeof setInterval> | null = null;
    private config: any;

    constructor(config: any) {
      this.config = config;
      this.startDate = new Date(config.startDate).getTime();
      this.endDate = new Date(config.endDate).getTime();

      this.elements = {
        days: getElementById("days"),
        hours: getElementById("hours"),
        minutes: getElementById("minutes"),
        seconds: getElementById("seconds"),
        title: getElementById("countdown-title"),
        countdownToExam: getElementById("countdown-to-exam"),
        progressToResults: getElementById("progress-to-results"),
        completionMessage: getElementById("completion-message"),
        progressBar: getElementById("progress-bar"),
        toggleButton: getElementById("toggle-countdown"),
        toggleIcon: getElementById("toggle-icon"),
        countdownContent: getElementById("countdown-content"),
      };

      this.init();
    }

    private init(): void {
      this.setupToggle();
      this.startUpdating();
    }

    private setupToggle(): void {
      const { toggleButton, countdownContent, toggleIcon } = this.elements;
      if (!toggleButton || !countdownContent || !toggleIcon) return;

      const isCollapsed = getStorageItem("countdownCollapsed") === "true";
      this.setCollapseState(isCollapsed);

      toggleButton.addEventListener("click", () => {
        const isCurrentlyVisible = countdownContent.style.display !== "none";
        this.setCollapseState(isCurrentlyVisible);
        setStorageItem("countdownCollapsed", isCurrentlyVisible.toString());
      });
    }

    private setCollapseState(collapsed: boolean): void {
      const { countdownContent, toggleIcon } = this.elements;
      if (!countdownContent || !toggleIcon) return;

      countdownContent.style.display = collapsed ? "none" : "block";
      toggleIcon.textContent = collapsed ? "▲" : "▼";
    }

    private startUpdating(): void {
      this.updateCountdown();
      this.updateInterval = setInterval(() => this.updateCountdown(), 1000);
    }

    private updateCountdown(): void {
      const now = Date.now();
      const distanceToExam = this.startDate - now;

      if (distanceToExam > 0) {
        this.showCountdownToExam();
      } else {
        const distanceToResults = this.endDate - now;
        if (distanceToResults > 0) {
          this.showProgressToResults();
        } else {
          this.showCompletionMessage();
        }
      }
    }

    private showCountdownToExam(): void {
      showElement(this.elements.countdownToExam);
      hideElement(this.elements.progressToResults);
      hideElement(this.elements.completionMessage);

      if (this.elements.title) {
        setElementContent(this.elements.title, this.config.title);
      }

      const time = calculateTimeDifference(this.startDate);
      setElementContent(this.elements.days, time.days.toString());
      setElementContent(this.elements.hours, padNumber(time.hours));
      setElementContent(this.elements.minutes, padNumber(time.minutes));
      setElementContent(this.elements.seconds, padNumber(time.seconds));
    }

    private showProgressToResults(): void {
      hideElement(this.elements.countdownToExam);
      showElement(this.elements.progressToResults);
      hideElement(this.elements.completionMessage);

      if (this.elements.title) {
        setElementContent(this.elements.title, this.config.title);
      }

      const progress = calculateProgress(this.startDate, this.endDate);
      if (this.elements.progressBar) {
        this.elements.progressBar.style.width = `${progress}%`;
        setElementContent(this.elements.progressBar, `${progress}%`);
      }
    }

    private showCompletionMessage(): void {
      hideElement(this.elements.countdownToExam);
      hideElement(this.elements.progressToResults);
      showElement(this.elements.completionMessage);
      setElementContent(this.elements.title, "BAC 2025 | Finalizat");
    }

    public destroy(): void {
      if (this.updateInterval) {
        clearInterval(this.updateInterval);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    const configScript = document.querySelector(
      "script[data-countdown-config]"
    );
    if (configScript) {
      const config = JSON.parse(configScript.textContent || "{}");
      new CountdownManager(config);
    }
  });
</script>

<script is:inline define:vars={{ config }}>
  // Pass config to the main script
  const scriptEl = document.createElement("script");
  scriptEl.type = "application/json";
  scriptEl.dataset.countdownConfig = "true";
  scriptEl.textContent = JSON.stringify(config);
  document.head.appendChild(scriptEl);
</script>
