---
import { apiService, type FileStructure } from '../utils/api';
import { formatKey, isYearFolder } from '../utils/data';

interface Props {
  subject: string;
  page: string;
  data?: FileStructure;
  isRoot?: boolean;
  depth?: number;
}

const {
  subject,
  page,
  data,
  isRoot = true,
  depth = 0,
} = Astro.props;

const expansionMode = "years" as "none" | "years" | "all"; // Default expansion mode: 'none', 'years', 'all'

// Only fetch at the root level
let content: FileStructure = {};
let workerError: string | null = null;

if (isRoot && !data) {
  try {
    content = await apiService.getContent(subject, page) || {};
  } catch (error) {
    workerError = `Failed to fetch from API: ${error instanceof Error ? error.message : String(error)}`;
    console.warn("API fetch failed, falling back to empty structure:", error);
  }
} else {
  // Use the passed data for nested calls
  content = data || {};
}

// Check if this is an extra page
const isExtra = page === "extra" || page.endsWith("/extra");
  
// CSS classes based on page type (computed once)
const classNames = {
  list: isExtra ? "extra-list" : "content-list",
  link: isExtra ? "extra-link" : "content-link",
  text: isExtra ? "extra-text" : "content-text",
} as const;

// Calculate padding based on depth
const paddingLeft = `${depth * 1}rem`;

const host = import.meta.env.WORKER_URL || 'http://localhost:8787';
---

<div class="w-full" id={`content-${subject}-${page.replace("/", "-")}`}>
  {
    workerError && (
      <div class="text-sm text-red-500">
        <p>Failed to load content from worker: {workerError}</p>
      </div>
    )
  }

  <div>
    {
       Object.keys(content).length > 0 ? (
        <ul class={classNames.list} style={`padding-left: ${paddingLeft}`}>
          {
            Object.entries(content).reverse().map(([key, value]) => {
              if (typeof value === "string") {
                // It's a file
                return (
                  <li>
                    <a
                      class={`${classNames.link} flex items-center break-normal`}
                      href={host + "/" + value}
                      target="_blank"
                      rel="noopener noreferrer"
                      aria-label={`Open ${key} in new tab`}
                    >
                      {!isExtra && (
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" />
                          <path fill="currentColor" d="M8 10a1 1 0 100-2 1 1 0 000 2zm0 2a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1z" />
                        </svg>
                      )}
                      {key.split('_').map((part, i, arr) => (
                        <Fragment>
                          {part}{i < arr.length - 1 && <>&#8203;_</>}
                        </Fragment>
                      ))}
                    </a>
                  </li>
                );
              } else if (typeof value === "object" && value !== null) {
                // It's a directory
                const isYear = isYearFolder(key);
                const showDivider = depth === 1 && key === Object.keys(content)[Object.keys(content).length - 1];
                const folderId = `folder-${subject}-${page}-${key}-${depth}`;
                
                // Determine if folder should be expanded by default
                const shouldBeExpanded = expansionMode === "all" || (expansionMode === "years" && isYear);
                const arrowRotation = shouldBeExpanded ? "rotate(90deg)" : "rotate(0deg)";
                const displayStyle = shouldBeExpanded ? "display: block;" : "display: none;";
                
                return (
                  <li class="space-y-2" id={isYear ? key : undefined}>
                    {showDivider && <hr class="border-black m-2" />}
                    <div class="folder-container">
                      <div 
                        class={`${classNames.text} flex items-center cursor-pointer folder-toggle`}
                        data-folder-id={folderId}
                        data-folder-type={isYear ? "year" : "folder"}
                        data-expanded={shouldBeExpanded ? "true" : "false"}
                      >
                        <svg
                          class="w-5 h-5 mr-2 transition-transform duration-200 folder-arrow"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                          style={`transform: ${arrowRotation}`}
                        >
                          <path d="M6 6L14 10L6 14V6Z" />
                        </svg>
                        <div class="flex items-center">
                          <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" />
                          </svg>
                          <span>{formatKey(key)}</span>
                        </div>
                      </div>
                      <div 
                        id={folderId}
                        class="folder-content mt-2"
                        style={displayStyle}
                      >
                        <Astro.self 
                          subject={subject} 
                          page={key}
                          data={value}
                          isRoot={false}
                          depth={depth + 1}
                        />
                      </div>
                    </div>
                  </li>
                );
              }
            })
          }
        </ul>
      ) : (
        <p class={classNames.text} style={`padding-left: ${paddingLeft}`}>Fără conținut</p>
      )
    }
  </div>
</div>

<script>
  // Simple folder toggle functionality
  document.addEventListener("DOMContentLoaded", () => {
    const savedMode = localStorage.getItem('folderExpansionMode') || 'years';
    
    // Initialize folders
    initializeFolders(savedMode);
    
    // Add click listeners
    addClickListeners();
    
    // Listen for expansion mode changes
    window.addEventListener('expansionModeChanged', (event) => {
      const customEvent = event as CustomEvent;
      const { mode } = customEvent.detail;
      applyExpansionMode(mode);
    });
    
    function addClickListeners(): void {
      const folderToggles = document.querySelectorAll('.folder-toggle') as NodeListOf<HTMLElement>;
      
      folderToggles.forEach((toggle) => {
        toggle.addEventListener('click', () => {
          const folderId = toggle.getAttribute('data-folder-id');
          const folderContent = document.getElementById(folderId!);
          const arrow = toggle.querySelector('.folder-arrow') as HTMLElement;
          const isExpanded = toggle.getAttribute('data-expanded') === 'true';
          
          if (folderContent && arrow) {
            if (isExpanded) {
              folderContent.style.display = 'none';
              arrow.style.transform = 'rotate(0deg)';
              toggle.setAttribute('data-expanded', 'false');
            } else {
              folderContent.style.display = 'block';
              arrow.style.transform = 'rotate(90deg)';
              toggle.setAttribute('data-expanded', 'true');
            }
          }
        });
      });
    }
    
    function initializeFolders(mode: string): void {
      const folderToggles = document.querySelectorAll('.folder-toggle') as NodeListOf<HTMLElement>;
      
      folderToggles.forEach((toggle) => {
        const folderType = toggle.getAttribute('data-folder-type');
        const folderId = toggle.getAttribute('data-folder-id');
        const folderContent = document.getElementById(folderId!);
        const arrow = toggle.querySelector('.folder-arrow') as HTMLElement;
        
        if (folderContent && arrow) {
          const shouldBeOpen = mode === 'all' || (mode === 'years' && folderType === 'year');
          
          if (shouldBeOpen) {
            folderContent.style.display = 'block';
            arrow.style.transform = 'rotate(90deg)';
            toggle.setAttribute('data-expanded', 'true');
          } else {
            folderContent.style.display = 'none';
            arrow.style.transform = 'rotate(0deg)';
            toggle.setAttribute('data-expanded', 'false');
          }
        }
      });
    }
    
    function applyExpansionMode(mode: string): void {
      const folderToggles = document.querySelectorAll('.folder-toggle') as NodeListOf<HTMLElement>;
      
      folderToggles.forEach((toggle) => {
        const folderType = toggle.getAttribute('data-folder-type');
        const shouldBeOpen = mode === 'all' || (mode === 'years' && folderType === 'year');
        
        const folderId = toggle.getAttribute('data-folder-id');
        const folderContent = document.getElementById(folderId!);
        const arrow = toggle.querySelector('.folder-arrow') as HTMLElement;
        
        if (folderContent && arrow) {
          if (shouldBeOpen) {
            folderContent.style.display = 'block';
            arrow.style.transform = 'rotate(90deg)';
            toggle.setAttribute('data-expanded', 'true');
          } else {
            folderContent.style.display = 'none';
            arrow.style.transform = 'rotate(0deg)';
            toggle.setAttribute('data-expanded', 'false');
          }
        }
      });
    }
  });
</script>

<style>
  /* Arrow rotation animation */
  .folder-arrow {
    transition: transform 0.2s ease;
  }
  
  /* Hover effect */
  .folder-toggle:hover {
    opacity: 0.8;
  }
</style>