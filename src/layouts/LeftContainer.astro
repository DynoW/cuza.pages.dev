---
import CountdownTimer from "../components/CountdownTimer.astro";

interface Props {
ad?: boolean;
}

const {
    ads = false
} = Astro.params;


const ad = ads && import.meta.env.PROD;

---

<div id="left-container" class="flex flex-col justify-center w-full basis-1/3 min-w-52 mb-2.5 gap-2 lg:mb-[387px]">
    <div class="bg-[rgba(10,13,16,.9)] rounded-3xl p-5">
        <div class="flex flex-col">
            <slot />
        </div>
    </div>
    <div class="flex flex-col gap-2">
        <div id="ad" class="top-2 lg:w-[342px]">
            <CountdownTimer />
            {
                ad && (
                    <>
                        <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1687540397754088"
                        crossorigin="anonymous"></script>
                        <!-- banner-ad-1-vertical -->
                        <ins class="adsbygoogle"
                            style="display:block"
                            data-ad-client="ca-pub-1687540397754088"
                            data-ad-slot="5482915098"
                            data-ad-format="auto"
                            data-full-width-responsive="true"></ins>
                        <script is:inline>
                            (adsbygoogle = window.adsbygoogle || []).push({});
                        </script>
                    </>
                )
            }
        </div>
        {
            ad && (
                <script>
                    const ad = document.getElementById("ad");
                    let adOriginalTop = 780;
                    
                    if (ad) {
                        adOriginalTop = ad.getBoundingClientRect().top + window.scrollY;
                    }

                    window.addEventListener('scroll', () => {
                        if(ad && window.innerWidth > 768) {
                            const scrollY = window.scrollY;
                            if (scrollY > adOriginalTop) { //(window.innerWidth >= 1024 ? adOriginalTop + 24 : (window.innerWidth>= 968 ? adOriginalTop + 20 : (window.innerWidth >= 835 ? adOriginalTop + 25 : adOriginalTop + 40 )))
                                ad.style.position = 'fixed';
                            } else {
                                ad.style.position = 'static';
                            }
                        }
                    });
                </script>
            )
        }
    </div>
        <script is:inline>
        window.scrollTo(0, 0);
        document.addEventListener('DOMContentLoaded', () => {
            // Only run on devices wider than phone screens
            if (window.innerWidth <= 768) return;

            const leftContainer = document.getElementById('left-container');
            const footer = document.querySelector('footer');
            
            if (leftContainer && footer) {
                const adjustMarginBottom = () => {
                    // Double check screen size
                    if (window.innerWidth <= 768) return;
                    
                    const viewportHeight = window.innerHeight;
                    const containerBottom = leftContainer.getBoundingClientRect().bottom + window.scrollY;
                    
                    // Calculate initial margin to push footer out of sight
                    const initialMargin = Math.max(0, viewportHeight - containerBottom);
                    
                    // Set initial margin (footer out of view)
                    leftContainer.style.marginBottom = `${initialMargin}px`;
                    
                    // Add 3 second delay before animation
                    setTimeout(() => {
                        const duration = 800; // Animation duration in ms
                        const steps = 60; // Number of animation steps
                        const stepDuration = duration / steps;
                        const stepSize = initialMargin / steps;
                        
                        let currentStep = 0;
                        
                        const animate = () => {
                            if (currentStep < steps) {
                                const newMargin = initialMargin - (stepSize * currentStep);
                                leftContainer.style.marginBottom = `${newMargin}px`;
                                currentStep++;
                                setTimeout(animate, stepDuration);
                            } else {
                                leftContainer.style.marginBottom = '0px';
                            }
                        };
                        
                        animate();
                    }, 2000);
                };
                
                // Adjust on page load
                adjustMarginBottom();
                
                // Adjust on window resize
                window.addEventListener('resize', () => {
                    if (window.innerWidth <= 768) {
                        // Reset margin on mobile
                        leftContainer.style.marginBottom = '';
                    } else {
                        adjustMarginBottom();
                    }
                });
            }
        });
    </script>
</div>
